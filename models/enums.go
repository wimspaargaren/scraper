// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "Scraper": Enums
//
// Command:
// $ goagen
// --version=v1.4.1

package models

import (
	"database/sql/driver"
	"fmt"
)

// Platform Enum
type Platform int64

const (
	PlatformGoogleScholar Platform = 1
	PlatformACM           Platform = 2
	PlatformSpringer      Platform = 3
	PlatformIEEE          Platform = 4
)

var platformStrings = map[int64]string{
	1: "GoogleScholar",
	2: "ACM",
	3: "Springer",
	4: "IEEE",
}

var platformStringMap = map[string]Platform{
	"GoogleScholar": PlatformGoogleScholar,
	"ACM":           PlatformACM,
	"Springer":      PlatformSpringer,
	"IEEE":          PlatformIEEE,
}

func (u *Platform) Scan(value interface{}) error {
	i, ok := value.(int64)
	if !ok {
		return fmt.Errorf("could not cast value %v to int64", value)
	}
	*u = Platform(i)
	return nil
}
func (u *Platform) ScanFromString(name string) error {
	var ok bool
	*u, ok = platformStringMap[name]
	if !ok {
		return fmt.Errorf("%s is not a valid name for a value of Platform", name)
	}
	return nil
}
func (u Platform) Value() (driver.Value, error) { return int64(u), nil }
func (u Platform) String() string {
	if u == 0 {
		return "undefined"
	}
	return platformStrings[int64(u)]
}
func (u Platform) AllStrings() map[int64]string { return platformStrings }

// ResearchQuestion Enum
type ResearchQuestion int64

const (
	ResearchQuestionWhatInfluencesDecisionMakingInSoftwareDevelopment           ResearchQuestion = 1
	ResearchQuestionWhyIsImportantToMakeEffectiveDecisionsInSoftwareDevelopment ResearchQuestion = 2
	ResearchQuestionWhereAreDecisionMadeDuringSoftwareDevelopment               ResearchQuestion = 3
	ResearchQuestionHowAreDecisionMadeInSoftwareDevelopment                     ResearchQuestion = 4
	ResearchQuestionWhatIsTheContextOfDecisionMakingInSoftwareDevelopment       ResearchQuestion = 5
	ResearchQuestionWhichToolsSupportDecisionMakingInSoftwareDevelopment        ResearchQuestion = 6
)

var researchQuestionStrings = map[int64]string{
	1: "What influences decision-making in software development",
	2: "Why is important to make effective decisions in software development",
	3: "Where are decision made during software development",
	4: "How are decision made in software development",
	5: "What is the context of decision-making in software development",
	6: "Which tools support decision-making in software development",
}

var researchQuestionStringMap = map[string]ResearchQuestion{
	"What influences decision-making in software development":              ResearchQuestionWhatInfluencesDecisionMakingInSoftwareDevelopment,
	"Why is important to make effective decisions in software development": ResearchQuestionWhyIsImportantToMakeEffectiveDecisionsInSoftwareDevelopment,
	"Where are decision made during software development":                  ResearchQuestionWhereAreDecisionMadeDuringSoftwareDevelopment,
	"How are decision made in software development":                        ResearchQuestionHowAreDecisionMadeInSoftwareDevelopment,
	"What is the context of decision-making in software development":       ResearchQuestionWhatIsTheContextOfDecisionMakingInSoftwareDevelopment,
	"Which tools support decision-making in software development":          ResearchQuestionWhichToolsSupportDecisionMakingInSoftwareDevelopment,
}

func (u *ResearchQuestion) Scan(value interface{}) error {
	i, ok := value.(int64)
	if !ok {
		return fmt.Errorf("could not cast value %v to int64", value)
	}
	*u = ResearchQuestion(i)
	return nil
}
func (u *ResearchQuestion) ScanFromString(name string) error {
	var ok bool
	*u, ok = researchQuestionStringMap[name]
	if !ok {
		return fmt.Errorf("%s is not a valid name for a value of ResearchQuestion", name)
	}
	return nil
}
func (u ResearchQuestion) Value() (driver.Value, error) { return int64(u), nil }
func (u ResearchQuestion) String() string {
	if u == 0 {
		return "undefined"
	}
	return researchQuestionStrings[int64(u)]
}
func (u ResearchQuestion) AllStrings() map[int64]string { return researchQuestionStrings }

// ScopeType Enum
type ScopeType int64

const (
	ScopeTypeAccess     ScopeType = 1
	ScopeTypeReseller   ScopeType = 2
	ScopeTypeCollective ScopeType = 3
	ScopeTypeVendor     ScopeType = 4
	ScopeTypeAdmin      ScopeType = 5
)

var scopeTypeStrings = map[int64]string{
	1: "access",
	2: "reseller",
	3: "collective",
	4: "vendor",
	5: "admin",
}

var scopeTypeStringMap = map[string]ScopeType{
	"access":     ScopeTypeAccess,
	"reseller":   ScopeTypeReseller,
	"collective": ScopeTypeCollective,
	"vendor":     ScopeTypeVendor,
	"admin":      ScopeTypeAdmin,
}

func (u *ScopeType) Scan(value interface{}) error {
	i, ok := value.(int64)
	if !ok {
		return fmt.Errorf("could not cast value %v to int64", value)
	}
	*u = ScopeType(i)
	return nil
}
func (u *ScopeType) ScanFromString(name string) error {
	var ok bool
	*u, ok = scopeTypeStringMap[name]
	if !ok {
		return fmt.Errorf("%s is not a valid name for a value of ScopeType", name)
	}
	return nil
}
func (u ScopeType) Value() (driver.Value, error) { return int64(u), nil }
func (u ScopeType) String() string {
	if u == 0 {
		return "undefined"
	}
	return scopeTypeStrings[int64(u)]
}
func (u ScopeType) AllStrings() map[int64]string { return scopeTypeStrings }

// Status Enum
type Status int64

const (
	StatusUnprocessed Status = 1
	StatusNotUseful   Status = 2
	StatusUseful      Status = 3
	StatusUnknown     Status = 4
	StatusDuplicate   Status = 5
)

var statusStrings = map[int64]string{
	1: "Unprocessed",
	2: "NotUseful",
	3: "Useful",
	4: "Unknown",
	5: "Duplicate",
}

var statusStringMap = map[string]Status{
	"Unprocessed": StatusUnprocessed,
	"NotUseful":   StatusNotUseful,
	"Useful":      StatusUseful,
	"Unknown":     StatusUnknown,
	"Duplicate":   StatusDuplicate,
}

func (u *Status) Scan(value interface{}) error {
	i, ok := value.(int64)
	if !ok {
		return fmt.Errorf("could not cast value %v to int64", value)
	}
	*u = Status(i)
	return nil
}
func (u *Status) ScanFromString(name string) error {
	var ok bool
	*u, ok = statusStringMap[name]
	if !ok {
		return fmt.Errorf("%s is not a valid name for a value of Status", name)
	}
	return nil
}
func (u Status) Value() (driver.Value, error) { return int64(u), nil }
func (u Status) String() string {
	if u == 0 {
		return "undefined"
	}
	return statusStrings[int64(u)]
}
func (u Status) AllStrings() map[int64]string { return statusStrings }
