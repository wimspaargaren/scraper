// Code generated by goagen v1.4.0, DO NOT EDIT.
//
// API "Scraper": Models
//
// Command:
// $ goagen
// --version=v1.4.1

package models

import (
	"context"
	"time"

	"github.com/goadesign/goa"
	"github.com/jinzhu/gorm"
	uuid "github.com/satori/go.uuid"
)

// Request done for P4 service
type Article struct {
	ID           uuid.UUID `sql:"type:uuid;default:uuid_generate_v4()" gorm:"primary_key"` // primary key
	Cited        int
	Comment      string
	CreatedAt    time.Time
	DeletedAt    *time.Time
	Abstract     string
	Doi          string
	Lang         string
	Authors      string
	Journal      string
	Publisher    string
	GotPdf       bool
	Metadata     []byte   `sql:"type:jsonb"`
	Keywords     []byte   `sql:"type:jsonb"`
	Platform     Platform `sql:"type:smallint"` // enum Platform
	Processed    Status   `sql:"type:smallint"` // enum Status
	Query        string
	ResultNumber int
	Title        string
	URL          string
	UpdatedAt    time.Time
	Year         int
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Article) TableName() string {
	return "articles"

}

// ArticleDB is the implementation of the storage interface for
// Article.
type ArticleDB struct {
	Db *gorm.DB
}

// NewArticleDB creates a new storage type.
func NewArticleDB(db *gorm.DB) *ArticleDB {
	return &ArticleDB{Db: db}
}

// DB returns the underlying database.
func (m *ArticleDB) DB() interface{} {
	return m.Db
}

// ArticleStorage represents the storage interface.
type ArticleStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Article, error)
	Get(ctx context.Context, id uuid.UUID) (*Article, error)
	Add(ctx context.Context, article *Article) error
	Update(ctx context.Context, article *Article) error
	Delete(ctx context.Context, id uuid.UUID) error
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *ArticleDB) TableName() string {
	return "articles"

}

// CRUD Functions

// Get returns a single Article as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *ArticleDB) Get(ctx context.Context, id uuid.UUID) (*Article, error) {
	defer goa.MeasureSince([]string{"goa", "db", "article", "get"}, time.Now())

	var native Article
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Article
func (m *ArticleDB) List(ctx context.Context) ([]*Article, error) {
	defer goa.MeasureSince([]string{"goa", "db", "article", "list"}, time.Now())

	var objs []*Article
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *ArticleDB) Add(ctx context.Context, model *Article) error {
	defer goa.MeasureSince([]string{"goa", "db", "article", "add"}, time.Now())

	model.ID = uuid.Must(uuid.NewV4())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Article", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *ArticleDB) Update(ctx context.Context, model *Article) error {
	defer goa.MeasureSince([]string{"goa", "db", "article", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Article", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *ArticleDB) Delete(ctx context.Context, id uuid.UUID) error {
	defer goa.MeasureSince([]string{"goa", "db", "article", "delete"}, time.Now())

	err := m.Db.Where("id = ?", id).Delete(&Article{}).Error
	if err != nil {
		goa.LogError(ctx, "error deleting Article", "error", err.Error())
		return err
	}

	return nil
}
